# Wyatt_AnoDDPM_Anomaly_Detection_With_Denoising_Diffusion_Probabilistic_Models_Using_Simplex_CVPRW
link --> https://openaccess.thecvf.com/content/CVPR2022W/NTIRE/papers/Wyatt_AnoDDPM_Anomaly_Detection_With_Denoising_Diffusion_Probabilistic_Models_Using_Simplex_CVPRW_2022_paper.pdf
Github link --> https://github.com/Julian-Wyatt/AnoDDPM

AnoDDPM을 활용한 이상 감지 확률 모델과 생체적용, 노이즈 확산 확률 모델 학습, 이미지 주파수 분포 분석, 가우시안과 심플렉스 노이즈의 비교, AnoDDPM을 활용한 이상 징후 감지 연구 결과와 최신 논문 리뷰에 대한 내용을 다루는 논문입니다.

# introduction
-생체에서 생성 모델은 정상 참조 데이터를 학습하여 이상 감지를 제공하는 강력한 메커니즘을 제공한다.

-DDPMs는 GANs보다 우수한 모드 커버리지를 가지며, VAEs보다 높은 샘플 품질을 가지나, 마르코프 체인 시퀀스가 길어짐으로써 확장성이 떨어지고 샘플링 시간이 증가한다.

-그러나 이 전체 비밀 이미지로의 재구성 기반 이상 감지에서는 전체 마르코프 체인 확산이 필요하지 않음을 관찰한다.

-AnoDDPM은 고해상도 이미징에 확장 가능한 새로운 부분적 확산 이상 탐지 전략을 개발해, 시각적으로 및 통계적으로 효과적으로( +25.5% Sørensen–Dice 계수, +17.6% IoU 및 +7.4% AUC 개선) 뛰어나다.

-생체의 AnoDDPM을 통해 콘트롤을 받는 여러 규모의 심플렉스 잡음 확산 프로세스는 타겟 이상 크기에 대한 제어를 제공한다.


# 방법론
-자연 이미지는 주파수의 power law 분포를 보이며, 낮은 주파수 구성요소가 이미지에 더 많이 기여함.

-가우시안 백색 잡음이 균일한 스펙트럼 밀도를 갖기 때문에, 부분적으로 확산된 이미지의 낮은 주파수 구성요소는 고주파수 용어만큼 손상되지 않는다.

-이는 부분적 가우시안 확산이 초기 이미지의 구조를 쉽게 식별할 수 있게 남길 정도로 확실하게 나타나며, AnoDDPM 모델의 구별력을 제한함.

-또한, 변칙 이미지와 정상 이미지가 모두 power law를 따른다는 가정 하에, 저주파수 구성요소에 강력한 영향을 미치는 유사한 power law를 따르도록 확산 과정을 수정하려고 함.

# 심플렉스 노이즈
-2차원 경우에는 펄린 노이즈을 생성하는데, 단순 노이즈 대신 시행렬 그리드를 사용하여 구조적 문제를 줄이고 방향성 구조물을 감소시킨다.

-아노말리 감지 분할 접근법은 가우시안 또는 시행렬 노이즈를 사용하는 DDPMs를 탐색한다. 이로 인해 구조적인 이상 현상이 포함되고 소음 제거 프로세스가 이러한 구조화된 이상 현상을 복원할 수 있다.

-또한, 단순 노이즈의 일련의 옥타브를 적용할 수 있으며 주파수를 조절하여 이미지의 큰 부분을 손상시키고 재구성할 수 있다. 이는 DDPM 모델의 경우 근원함수가 가우시안 분포에서 샘플링되었다고 가정하기 때문에 중요하다.

-따라서, 기본적인 시행렬 노이즈 함수 대신 다음 주파수의 진폭이 감소되는 일련의 옥타브의 노이즈를 적용함으로써 더 많은 옥타브를 복합하여 가우시안 분포에 더 가깝게 만들 수 있다. 이는 저주파수 노이즈를 가우시안 분포로 근사화하는 데 중요하다.

-특히, 3차원 노이즈 함수로부터 샘플링할 때 2차원 노이즈 함수에서 샘플링할 때 필요하지 않은 자잘한 문제들을쉽게 수정할 수 있다. 한편, 시드를 무작위로 섞고 3차원 노이즈 함수에서 단면 취하면 된다.



# 가우시안 노이즈와 심플렉스 노이즈
-가우시안 노이즈는 높은 품질의 샘플을 생성하지만 큰 t값으로 이미지를 손상시키면 이미지 세부사항이 손실되고 왜곡된다. 반면, 심플렉스 노이즈는 주파수가 규모적인 노이즈의 최대 주파수가 증가함에 따라 암 진단에 미치는 영향을 잘 포착한다.

-본 연구에서는 어떤 출시 시점 t가 가장 좋은 결과를 나타내는지 평가한다. 노이즈 세그멘테이션 평가 시, AnoDDPM의 성능은 흥미로운 결과를 보인다. 로스쿨 공부를 통해 λ= 250이 이 데이터셋에게 최적이었음을 경험적으로 찾아냈다.

-또한, Context Encoder [12], f-AnoGAN [20], AnoDDPM with Gaussian noise [7], AnoDDPM with simplex noise를 비교한 ROC 곡선은 단순 에러 확률 예측 평균을 사용하여 우리의 의미있는 dataset에서 AnoDDPM with Gaussian noise가 임의로 대비하여 다소 우수함을 확인한다.

-이러한 상황에서 AnoDDPM with simplex noise는 엄청난 성과를 거두며 일반적으로 f-AnoGAN보다 더 나은 결과를 나타낸다.




# 교육
훈련 단계에서는 건강한 샘플만 사용하여 알고리즘 1에 따라 모델을 훈련시킨다.

추론 시에는 이상 데이터 세트 A에서 쿼리를 선택하여 일정 시간 단계로 잡음을 준 후, 원래 데이터로 되돌려서 DDPM 모델을 사용한다.

재구성 후 이미지와 초기 이미지 간의 제곱 오차를 계산하고 종양을 분할하기 위해 임계값을 설정한다.

분할 알고리즘을 통해 예측 결과를 실제 결과와 비교할 수 있으며, 오차 제곱이 0.5보다 큰 경우 강조한다.



# 구현 및 가용성
모든 DDPM 실험에서는 Dhariwal 및 Nichol의 U-Net 아키텍처를 사용했으며, 변환트랜스포머 사인 함수 위치 임베딩을 사용했다.

모델의 하이퍼파라미터는 확산 단계 1000, 채널 128, 헤드 2, 주의 해상도 32,16,8, 학습율 1e−4, 옵티마이저 AdamW 등이다.

데이터셋으로는 Neurofeedback Skull-Stripped (NFBS) 리포지토리를 활용했으며, 뇌종양으로 이상 징후를 평가하기 위한 22개 T1 강조 MRI 스캔을 사용했다.

이미지 강도 불균일성을 보정하기 위해 BrainSuite [22]에서 바이어스 필드 보정을 적용하였다.

데이터셋은 256×256×156 비-스컬 스트립 스캔으로 이루어져 있으며, 이를 175×240으로 중앙 자르고 256×256으로 크기 조정하였다.


# 코드분석
-- 메서드 A - 다양한 심플렉스 주파수 사용
for i in range(6, 0, -1):
    freq = 2 ** i  # 현재 반복에 따라 주파수를 설정합니다
    noise_fn = lambda x, t: generate_simplex_noise(self.simplex, x, t, False, frequency=freq).float()
    
    # 각 시간 단계에서 샘플링하고 노이즈 제거
    for t_distance in range(50, ARGS["sample distance"], 50):
        output = torch.empty((total_avg, 1, *args["img_size"]), device=x_0.device)
        for avg in range(total_avg):
            t_tensor = torch.tensor([t_distance], device=x_0.device).repeat(x_0.shape[0])
            x = self.sample_q(x_0, t_tensor, noise_fn(x_0, t_tensor).float())
            # 다중 샘플을 노이즈 제거하고 평균을 계산합니다
            for t in range(int(t_distance) - 1, -1, -1):
                t_batch = torch.tensor([t], device=x.device).repeat(x.shape[0])
                with torch.no_grad():
                    out = self.sample_p(model, x, t_batch, denoise_fn=noise_fn)
                    x = out["sample"]
            output[avg, ...] = x
        # 이미지 저장 및 이상 감지 수행
-- 메서드 B - 옥타브 기반 심플렉스 노이즈 사용
for i in range(1, end_freq + 1):
    freq = 2 ** i  # 현재 반복에 따라 주파수를 설정합니다
    noise_fn = lambda x, t: generate_simplex_noise(self.simplex, x, t, False, frequency=freq).float()
    
    # 각 시간 단계에서 샘플링하고 노이즈 제거
    for t_distance in range(50, end, 50):
        output = torch.empty((total_avg, 1, *args["img_size"]), device=x_0.device)
        for avg in range(total_avg):
            t_tensor = torch.tensor([t_distance], device=x_0.device).repeat(x_0.shape[0])
            x = self.sample_q(x_0, t_tensor, noise_fn(x_0, t_tensor).float())
            # 다중 샘플을 노이즈 제거하고 평균을 계산합니다
            for t in range(int(t_distance) - 1, -1, -1):
                t_batch = torch.tensor([t], device=x.device).repeat(x.shape[0])
                with torch.no_grad():
                    out = self.sample_p(model, x, t_batch, denoise_fn=noise_fn)
                    x = out["sample"]
            output[avg, ...] = x
        # 이미지 저장 및 이상 감지 수행

이 코드는 이미지 이상을 감지하기 위한 Python 코드입니다. 주요 부분은 다음과 같습니다.

메서드 A는 서로 다른 시뮬렉스 주파수를 사용하여 이상을 감지하는 방법을 설명합니다. 먼저 64 주파수에서 50 단계에서 10 회 샘플링하고, 각 샘플에 대해 노이즈를 제거하고 평균을 계산합니다. 그런 다음 t = (50, ARGS["샘플 간격"], 50) 범위에서 반복합니다.

메서드 B는 옥타브 기반의 시뮬렉스 잡음을 사용하여 이상을 감지하는 방법을 설명합니다. 먼저 초기 "좋은" 시뮬렉스 옥타브 매개변수 (예: 64 주파수, 옥타브 = 6, 지속성 = 0.9)를 사용합니다. 그런 다음 50 단계에서 10 회 샘플링하고, 각 샘플에 대해 노이즈를 제거하고 평균을 계산합니다. 그리고 t = (50, ARGS["샘플 간격"], 50) 범위에서 반복합니다.


